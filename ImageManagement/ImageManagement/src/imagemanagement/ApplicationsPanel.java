/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package imagemanagement;

import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;

/**
 *
 * @author ediStandard
 */
public class ApplicationsPanel extends javax.swing.JPanel {

    /**
     * Creates new form ApplicationsPanel
     */
    public ApplicationsPanel() {
        initComponents();
        
        updateApplicationList();
    }
    
    //this function will be invoked when either one of the two lists had a selection change
    public void updateListSelection(){
        Application app = (Application) appsList.getSelectedValue(); //get the element selected
        if(app == null) //try to see if something is selected in the notused list
            app = (Application) notusedList.getSelectedValue();
        
        if(app == null){ //nothing selected
            nameText.setText("");
            diskText.setText("");
            cpuText.setText("");
            memoryText.setText("");
        }
        else{
            nameText.setText(app.getName());
            diskText.setText(app.getBasicSize()+""); //adding a string converts it to a string
            cpuText.setText(app.getCpuCores()+""); //adding a string converts it to a string
            memoryText.setText(app.getMemorySize()+"");
        }
        
        //call the update in the ComputerPanel class
        ImageManagement.imagePanel.updateAddApplication(app);
        
        
    }
    
    
    
    
    
    //this refreshes the list of applications - they may change when a new application is added
    //when an application is moved between in-use and not-used
    public void updateApplicationList(){
         //update my list from the repository of applications
        DefaultListModel modelAppList = (DefaultListModel) appsList.getModel();
        DefaultListModel modelNotUsedList = (DefaultListModel) notusedList.getModel();
        //first remove any applications that may be in there
        modelAppList.clear();
        modelNotUsedList.clear();
        for(int i = 0; i < ImageManagement.allApplications.size(); i++){
            Application a;
            //get the application from the repository
            a = ImageManagement.allApplications.get(i);
            
            //add this to the jList directly
            if(ImageManagement.isApplicationInUse(a))
                modelAppList.addElement(a);
            else
                modelNotUsedList.addElement(a);
        }
    }
    
    public Application getSelectedApplication(){
         Application app = (Application) appsList.getSelectedValue();
         if(app == null) //nothing is selected in the appsList...try the not used list
             app = (Application) notusedList.getSelectedValue();
         return app;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        appsList = new javax.swing.JList();
        jLabel1 = new javax.swing.JLabel();
        nameText = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        cpuText = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        diskText = new javax.swing.JTextField();
        updateButton = new javax.swing.JButton();
        addButton = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        notusedList = new javax.swing.JList();
        deleteButton = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        memoryText = new javax.swing.JTextField();

        setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), "Applications"));

        appsList.setModel(new DefaultListModel());
        appsList.setToolTipText("List of Used Applications");
        appsList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                appsListValueChanged(evt);
            }
        });
        jScrollPane1.setViewportView(appsList);

        jLabel1.setText("Name");

        nameText.setToolTipText("Enter Application Name Here");

        jLabel2.setText("CPUs");

        cpuText.setToolTipText("Enter Number of CPUs Here");
        cpuText.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                cpuTextCaretUpdate(evt);
            }
        });

        jLabel3.setText("Basic Size");

        diskText.setToolTipText("Enter Basic Size (in MB) Here");
        diskText.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                diskTextCaretUpdate(evt);
            }
        });

        updateButton.setText("Update Application");
        updateButton.setToolTipText("1. Select an Application 2. Enter new info above 3. Click Here to make changes");
        updateButton.setEnabled(false);
        updateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateButtonActionPerformed(evt);
            }
        });

        addButton.setText("Add New Application");
        addButton.setToolTipText("1. Select Application 2. Enter info above 3. Click Here to add an Application");
        addButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addButtonActionPerformed(evt);
            }
        });

        jLabel4.setText("Applications not currently in any Image");

        notusedList.setModel(new DefaultListModel());
        notusedList.setToolTipText("Applications not in Use");
        notusedList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                notusedListValueChanged(evt);
            }
        });
        jScrollPane2.setViewportView(notusedList);

        deleteButton.setText("Delete Application");
        deleteButton.setToolTipText("Select an Application and Click Here to Delete it");
        deleteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteButtonActionPerformed(evt);
            }
        });

        jLabel5.setText("Memory Size");

        memoryText.setToolTipText("Enter Memory Size (in MB) Here");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel4)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 281, Short.MAX_VALUE)
                    .addComponent(jScrollPane2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addComponent(jLabel5))
                        .addGap(24, 24, 24)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(memoryText, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(cpuText, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(diskText, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(nameText, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(updateButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(addButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(deleteButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(207, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1)
                            .addComponent(nameText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(9, 9, 9)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(cpuText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3)
                            .addComponent(diskText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel5)
                            .addComponent(memoryText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(updateButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(addButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(deleteButton)
                        .addGap(2, 2, 2))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 199, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(36, 36, 36)
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(33, 33, 33))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void diskTextCaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_diskTextCaretUpdate
        //get the text from the the textfield - a string
        String text = diskText.getText();
        double size; //this will be the size if I can convert it to a number
        //try to convert it to a number
        try{
            size = Double.parseDouble(text);
        }
        catch(Exception e){
            updateButton.setEnabled(false); //it is not a number, disable the button
            return; //give back control to the GUI thread
        }
        
        //if I get here.. size is an actual number
        updateButton.setEnabled(true);
        
        //at this point size has the correct number
        System.out.println(size);
    }//GEN-LAST:event_diskTextCaretUpdate

    private void appsListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_appsListValueChanged
        if(!appsList.isSelectionEmpty()) //if something is selected here
            notusedList.clearSelection();
        updateListSelection();
    }//GEN-LAST:event_appsListValueChanged

    private void updateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateButtonActionPerformed
        Application app = (Application) appsList.getSelectedValue(); //get the element selected
        if(app == null) //the notused list must have an element selcted
            app = (Application) notusedList.getSelectedValue();
        //something must have been selected bcause the button is enabled
        //get the information from the textfields and store that into my Application object
        String s;
        s = nameText.getText(); //get what the user entered in the textfiedl, and place it into the object
        app.setName(s); //update the name of the application
        
        //update the CPUs - the button is enabled, and so the text must be a number
        int i;
        s = this.cpuText.getText(); //get the cpu string that the user entered
        i = Integer.parseInt(s); //n exception should be thrown here
        app.setCpuCores(i);
        
        //update the disk size - again this should be a proper number
        double d;
        s = this.diskText.getText();
        d = Double.parseDouble(s);
        app.setBasicSize(d);
        
        int j;
        s = this.memoryText.getText();
        j = Integer.parseInt(s);
        app.setMemorySize(j);
        
        
        //need to force a repaint
        appsList.repaint(); //this may not be needed every time
        notusedList.repaint();
        //update the computer image panel
        ImageManagement.imagePanel.updateImageData();
        appsList.clearSelection();
    }//GEN-LAST:event_updateButtonActionPerformed

    private void cpuTextCaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_cpuTextCaretUpdate
        //get the text from the the textfield - a string
        String text = cpuText.getText();
        int cpus; //this will be the number of cpus if I can convert it to an integer
        //try to convert it to a number
        try{
            cpus = Integer.parseInt(text);
        }
        catch(Exception e){
            updateButton.setEnabled(false); //it is not a number, disable the button
            return; //give back control to the GUI thread
        }
        
        //if I get here.. size is an actual number
        updateButton.setEnabled(true);// TODO add your handling code here:
    }//GEN-LAST:event_cpuTextCaretUpdate

    private void notusedListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_notusedListValueChanged
        if(!notusedList.isSelectionEmpty()) //something 
            appsList.clearSelection();
        updateListSelection();
    }//GEN-LAST:event_notusedListValueChanged

    private void deleteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteButtonActionPerformed
        Application app = (Application) appsList.getSelectedValue(); //get selected image
        Application apps = (Application) notusedList.getSelectedValue();
        //remove it from the repository
        ImageManagement.allApplications.remove(app);
        ImageManagement.allApplications.remove(apps);
        //refresh the list of applications
        ImageManagement.appPanel.updateApplicationList();
        
    }//GEN-LAST:event_deleteButtonActionPerformed

    private void addButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addButtonActionPerformed
        Application app = new Application();
        
        String s;
        s = nameText.getText(); //get what the user entered in the textfiedl, and place it into the object
        app.setName(s); //update the name of the application
        
        //update the CPUs - the button is enabled, and so the text must be a number
        int i;
        s = this.cpuText.getText(); //get the cpu string that the user entered
        i = Integer.parseInt(s); //n exception should be thrown here
        app.setCpuCores(i);
        
        //update the disk size - again this should be a proper number
        double d;
        s = this.diskText.getText();
        d = Double.parseDouble(s);
        app.setBasicSize(d);
        
        int j;
        s = this.memoryText.getText();
        j = Integer.parseInt(s);
        app.setMemorySize(j);
        
        ImageManagement.allApplications.add(app);
        updateApplicationList(); 
        
        String name = nameText.getText();
        String codeSize = memoryText.getText(); //in kb
        String cpus = cpuText.getText();
        String diskSize = diskText.getText(); 
        
        
     
        if (diskSize.equals("") || cpus.equals("") || codeSize.equals("") || name.equals("")) {
            
            JOptionPane.showMessageDialog(null, "Please Enter Data in the Blank Fields");
        } 
    }//GEN-LAST:event_addButtonActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addButton;
    private javax.swing.JList appsList;
    private javax.swing.JTextField cpuText;
    private javax.swing.JButton deleteButton;
    private javax.swing.JTextField diskText;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextField memoryText;
    private javax.swing.JTextField nameText;
    private javax.swing.JList notusedList;
    private javax.swing.JButton updateButton;
    // End of variables declaration//GEN-END:variables
}
